#include <mpi.h>
#include <stdio.h>
#include <cuda_runtime.h>
#include <stdlib.h>
#include <string.h>
int main(int argc, char** argv, char *envp[]) {

        char * localRankStr = NULL;
        int localrank = 0, devCount = 0, mydev;
	// We extract the local rank initialization using an environment variable
	if ((localRankStr = getenv("SLURM_LOCALID")) != NULL) {
		localrank = atoi(localRankStr);
	}
	cudaGetDeviceCount(&devCount);
	mydev=localrank % devCount;
	cudaSetDevice(mydev);
	
	MPI_Init(NULL, NULL);
	int world_size;
	MPI_Comm_size(MPI_COMM_WORLD, &world_size);
	int world_rank;
	MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
	char processor_name[MPI_MAX_PROCESSOR_NAME];
	int name_len;
	MPI_Get_processor_name(processor_name, &name_len);
	
	// Let check which CUDA device we have
	char pciBusId[13];
	cudaDeviceGetPCIBusId ( pciBusId, 13, mydev );
	printf("MPI rank %d of %d on host %s is using GPU with PCI id %s.\n",world_rank,world_size,processor_name, pciBusId);
	MPI_Finalize();
}
