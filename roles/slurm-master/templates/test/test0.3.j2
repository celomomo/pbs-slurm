#!/usr/bin/env expect
source ./globals
set mpicc              "/usr/local/openmpi/1.2.9/bin/mpicc"
set nvcc               "/usr/local/cuda-12.1/bin/nvcc"

set file_in            "$test_dir/input"
set file_out           "$test_dir/output"
set file_err           "$test_dir/error"
set test_prog          "$test_name.prog"

set gpus                1
set nodes               1
set tasks_per_node      6

set job_name           "MPI2-GPU"
set job_id             0


#
# Test for existence of mpi compiler
#
if {[info exists mpicc] == 0} {
        skip "Mpicc not defined, can't perform mpi testing"
}
if {[file executable $mpicc] == 0} {
        skip "$mpicc does not exist"
}

proc cleanup {} {
        global job_id test_prog  

        cancel_job $job_id
        file delete $test_prog
}

#
# Rebuild program
#
spawn $nvcc -ccbin $mpicc -o $test_prog ${test_prog}.c
expect {
  eof {
   wait
  }
}

if {![file exists $test_prog]} {
        skip "Unable to build test program"
}
#
# Build input script file
#

make_bash_script $file_in "
 #!/bin/bash
  
 export OMPI_MCA_btl_openib_warn_no_hca_params_found=0
 module load cuda-toolkit
 module load openmpi/1.2.9 

 mpirun --mca btl ^openib $test_prog
 
 echo TASK_COMPLETE
"
spawn $bin_cat $file_in
#
# Spawn an sbatch job that uses stdout/err and confirm their contents
#
set timeout $max_job_delay
set no_start 0
spawn $sbatch -N$nodes --ntasks-per-node=$tasks_per_node --gres=gpu:$gpus -J $job_name -o $file_out -e $file_err  $file_in
expect {
        -re "Submitted batch job ($number)" {
                set job_id $expect_out(1,string)
                exp_continue
        }
        -re "Batch job submission failed" {
                set no_start 1
                exp_continue
        }
        -re "Unable to contact" {
                fail "Slurm appears to be down"
        }
        timeout {
                fail "srun not responding"
        }
        eof {
                wait
        }
}

if {$no_start != 0} {
        skip "Partition too small for test"
}
if {$job_id == 0} {
        fail "Batch submit failure"
}

#
# Wait for job to complete
#
wait_for_job -fail $job_id "DONE"

#
# Check for desired output in stdout
#
wait_for_file -fail $file_out
set complete        0
spawn $bin_cat $file_out
expect {
        -re "TASK_COMPLETE" {
                incr complete
                exp_continue
        }
        eof {
                wait
        }
}

set failure_message ""
if {$complete == 0} {
        set failure_message "Test failed to complete"
}

if {$failure_message != ""} {        
        log_debug "Check contents of $file_err"
        fail $failure_message
}
