#!/usr/bin/env expect
source ./globals

set file_in             "$test_dir/input"
set file_out            "$test_dir/output"
set file_err            "$test_dir/error"
set test_prog           "$test_name.prog"

set gpus                1
set nodes               2
set tasks_per_node      1

set job_name            "MPI3.1-GPU"
set job_id              0

set OSU_COLLECTIVE_PATH "/usr/local/osu-benchmarks-5.7.1/openmpi-4.1.4/libexec/osu-micro-benchmarks/mpi/collective"
proc cleanup {} {
        global job_id test_prog  

        cancel_job $job_id
}

#
# Build input script file
#
make_bash_script $file_in "
 #!/bin/bash
 export OMPI_MCA_btl=^openib
 export PMIX_MCA_gds=hash
 export OMPI_MCA_pml=ucx
 export CUDA_VISIBLE_DEVICES=0
 
 module load cuda-toolkit
 module load ucx/1.16.0
 module load openmpi/4.1.4
 
 $srun --mpi=pmix_v3 $OSU_COLLECTIVE_PATH/osu_alltoall -d cuda D D
 
 echo TASK_COMPLETE
"

#
# Spawn an sbatch job that uses stdout/err and confirm their contents
#
set timeout $max_job_delay
set no_start 0
spawn $sbatch -N$nodes --ntasks-per-node=$tasks_per_node --gres=gpu:$gpus -J $job_name -o $file_out -e $file_err -t2 $file_in
expect {
        -re "Submitted batch job ($number)" {
                set job_id $expect_out(1,string)
                exp_continue
        }
        -re "Batch job submission failed" {
                set no_start 1
                exp_continue
        }
        -re "Unable to contact" {
                fail "Slurm appears to be down"
        }
        timeout {
                fail "srun not responding"
        }
        eof {
                wait
        }
}

if {$no_start != 0} {
        skip "Partition too small for test"
}
if {$job_id == 0} {
        fail "Batch submit failure"
}

#
# Wait for job to complete
#
wait_for_job -fail $job_id "DONE"

#
# Check for desired output in stdout
#
wait_for_file -fail $file_out
set complete        0
set matches         0
set openmp_rank_sum 0
spawn $bin_cat $file_out
expect {
        -re "TASK_COMPLETE" {
                incr complete
                exp_continue
        }
        eof {
                wait
        }
}
set failure_message ""
if {$complete == 0} {
        set failure_message "Test failed to complete"
}

if {$failure_message != ""} {        
        log_debug "Check contents of $file_err"
        fail $failure_message
}
